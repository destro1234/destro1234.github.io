---
layout: post
title:      "Sinatra Project"
date:       2019-04-28 18:47:44 +0000
permalink:  sinatra_project
---

I thought that working on the Sinatra project was really interesting because its the first project in which i could see in the web browser. In certain other labs we got to see some html or css in the web browser, but working on the Sinatra project i could see my work through forms submitted to the web browser and that was really exciting to see something that i had created in a web browser and to be able to edit and change it as i wanted. There are several parts when making a project like this. First you have to create your models and model associations, which gives you an idea of how the models that you define will interact with each other. You can establish association such as belongs_to and has_many. But unlike previous project where i had to define all the methods for the models, through ActiveRecord the models in the Sinatra app inherit alot of methods. This could be kind of confusing because certain methods and attr_accessors gave a clear definition as to how the models were associated to each other and what methods these classes had access to. Through ActiveRecord thats no longer necessary and makes the models look much cleaner, but then it is very important to remember what the model associations mean as to what methods are available to each model. It is also neccessary to create the tables and migrations that define the specific attributes of a class, which ActiveRecord uses to define the methods neccessary for the models. The next step is to define the controllers and the views. The controllers were useful in this lab to determine the actual flow of the views. So the views are the actuall webpages and what they render to be viewed whether its and empty form to fill out or a profile page to view with the information from a form, and the controllers use the information from the form views to render the appropriate page that has been requested. In the controllers you can use the information passed in by the user and use it to create the objects and then you interact with those objects in the views page using ERB. ERB lets you access the information from the created objects and then interpolate that information into the HTML and CSS to display the appropriate information on the webpage. It was amazing to see how many moving pieces were working together to equal the final view to the user. The browsers also helped to determine the best way to define the controllers because they have their own built in tests that fail when the controllers are requesting the wrong pages or the worng information. This helped me alot to understand how to navigate between pages in the way that i wanted the website to work. The hardest part with this flow was logging in and making sure that other users coiuldn't interact with a different users information. It was neccessary to define helples method of logged_in? and current_user, using these two methods made it much easier to control which pages can be viewed and by who. As well as using the Bcrypt gem and sessions[:id] to authenticate a user and his chosen password such that the controller can determine wether or not the correct user was signed in. Overall to me it was a fun and challenging lab that really taught me alot about flow and creation of websites that have many users, and how to keep that information seperate to the correct user. 
